#!/usr/bin/env bash
###############################################################################
# analysis â€“ answer research questions on a cleaned TSV
# Author: Shivam Sharma
# This script outputs the most popular mechanic and domain, and calculates two Pearson correlations as per assignment spec
###############################################################################

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <clean.tsv>" >&2
    exit 1
fi

FILE="$1"
TAB=$'\t'

awk -v FS="$TAB" '
    function trim(s) { sub(/^[ \t]+/, "", s); sub(/[ \t]+$/, "", s); return s }

    NR==1 {
        for (i = 1; i <= NF; i++) {
            if      ($i == "Year Published")      cYear = i
            else if ($i == "Rating Average")      cRate = i
            else if ($i == "Complexity Average")  cComp = i
            else if ($i == "Mechanics")           cMech = i
            else if ($i == "Domains")             cDom  = i
        }
        next
    }

    {
        # count mechanics
        n = split($cMech, tmp, ",")
        for (i = 1; i <= n; i++) {
            v = trim(tmp[i])
            if (v != "") mech[v]++
        }
        # count domains
        n = split($cDom, tmp, ",")
        for (i = 1; i <= n; i++) {
            v = trim(tmp[i])
            if (v != "") dom[v]++
        }

        # accumulate for correlations
        yr   = $cYear + 0
        rate = $cRate + 0
        comp = $cComp + 0

        nY++; sumYr += yr; sumRate += rate; sumYr2 += yr*yr; sumRate2 += rate*rate; sumYrRate += yr*rate
        nC++; sumComp += comp; sumComp2 += comp*comp; sumCompRate += comp*rate
    }

    END {
        # most popular
        for (m in mech) if (mech[m] > mmax) { mmax = mech[m]; bestM = m }
        for (d in dom ) if (dom [d] > dmax) { dmax = dom [d]; bestD = d }

        printf "The most popular game mechanics is %s found in %d games\n", bestM, mmax
        printf "The most popular game domain is %s found in %d games\n", bestD, dmax

        # Pearson correlations
        rYr   = (nY*sumYrRate   - sumYr*sumRate)   / sqrt((nY*sumYr2   - sumYr^2)   *(nY*sumRate2 - sumRate^2))
        rComp = (nC*sumCompRate - sumComp*sumRate) / sqrt((nC*sumComp2 - sumComp^2)*(nC*sumRate2 - sumRate^2))

        printf "The correlation between the year of publication and the average rating is %.3f\n",      rYr
        printf "The correlation between the complexity of a game and its average rating is %.3f\n", rComp
    }
' "$FILE"
